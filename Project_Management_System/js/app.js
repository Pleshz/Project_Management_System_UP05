/**
 * Kanban Demo App: Projects, Employees, Tasks (Kanban)
 * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è demo-–¥–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–≤–∏—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü/–∫–∞–Ω–±–∞–Ω, –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –î–û –∏–ª–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM.
 *
 * –û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –µ—Å—Ç—å –ø–æ–ª–µ 'role' (admin/user), –∞ —Ç–∞–∫–∂–µ –ø–æ–ª–µ 'bio' –¥–ª—è –±–∏–æ–≥—Ä–∞—Ñ–∏–∏.
 * –û–¥–∏–Ω –∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ‚Äî –∞–¥–º–∏–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
 */

// –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
let projects = [
  { id: 1, name: 'Kanban Board', desc: '–í–µ–± Kanban –¥–ª—è –∫–æ–º–∞–Ω–¥', type: '–û—Ç–∫—Ä—ã—Ç—ã–π', users: 3 },
  { id: 2, name: 'HR-–ø–æ—Ä—Ç–∞–ª', desc: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π HR-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', type: '–ó–∞–∫—Ä—ã—Ç—ã–π', users: 2 },
];
let editProjectId = null;

// –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
let employees = [
  { id: 1, name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', email: 'ivan@company.ru', role: 'admin', bio: '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å IT-–ø—Ä–æ–µ–∫—Ç–∞. –õ—é–±–ª—é Agile –∏ Kanban.' },
  { id: 2, name: '–ú–∞—Ä–∏—è –ö–ª–∏–º–æ–≤–∞', email: 'maria@company.ru', role: 'user', bio: '–¢–∏–º–ª–∏–¥, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞ backend.' },
  { id: 3, name: '–û–ª—å–≥–∞ –ù–æ–≤–∏–∫–æ–≤–∞', email: 'olga@company.ru', role: 'user', bio: '–ê–Ω–∞–ª–∏—Ç–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∞.' }
];

// --- Kanban: –∑–∞–¥–∞—á–∏, —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –∑–∞–¥–∞—á–∏" ---
let tasks = [
  {
    id: 1,
    name: '–§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–ª—è –¥–æ—Å–∫–∏',
    desc: '–°–¥–µ–ª–∞—Ç—å drag&drop, –ø–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —á–µ–∫–ª–∏—Å—Ç',
    date: '2025-05-20',
    status: 'inprogress',
    priority: 'high',
    assignee: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
    subtasks: [
      { id: 101, text: 'Drag & Drop', done: true },
      { id: 102, text: '–ü–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏', done: false },
      { id: 103, text: '–ü–æ–¥–∑–∞–¥–∞—á–∏', done: true }
    ]
  },
  {
    id: 2,
    name: '–ë–∞–∑–æ–≤—ã–π backend',
    desc: '–ü—Ä–æ–∫–∏–Ω—É—Ç—å LocalStorage, –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å API',
    date: '2025-05-17',
    status: 'review',
    priority: 'medium',
    assignee: '–ú–∞—Ä–∏—è –ö–ª–∏–º–æ–≤–∞',
    subtasks: [
      { id: 201, text: 'LocalStorage —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ', done: true },
      { id: 202, text: '–¢–µ—Å—Ç API', done: false }
    ]
  },
  {
    id: 3,
    name: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∑–∞–ø—É—Å–∫—É',
    desc: '–ü–æ—à–∞–≥–æ–≤—ã–π –≥–∞–π–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    date: '2025-05-13',
    status: 'done',
    priority: 'low',
    assignee: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
    subtasks: [
      { id: 301, text: '–ì–∞–π–¥ –¥–ª—è –∑–∞–¥–∞—á', done: true }
    ]
  },
  {
    id: 4,
    name: '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π',
    desc: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–æ–ª–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª',
    date: '2025-05-21',
    status: 'new',
    priority: 'medium',
    assignee: '–û–ª—å–≥–∞ –ù–æ–≤–∏–∫–æ–≤–∞',
    subtasks: []
  }
];
let editTaskId = null;
let taskSubtasks = [];

// --- –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö id –¥–ª—è –ø–æ–¥–∑–∞–¥–∞—á ---
function getRandomId() { return Math.floor(Math.random() * 100000) + Date.now(); }

// --- –†–µ–Ω–¥–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ ---
function renderProjects() {
    const tbody = document.querySelector('.projects .table-block tbody');
    if (!tbody) return;
    tbody.innerHTML = '';
    projects.forEach(pr => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
        <td>${pr.name}</td>
        <td>${pr.type}</td>
        <td>${pr.desc}</td>
        <td>${pr.users}</td>
        <td>
          <button class="btn mini edit-project-btn" data-id="${pr.id}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úé</button>
          <button class="btn mini danger delete-project-btn" data-id="${pr.id}" title="–£–¥–∞–ª–∏—Ç—å">üóë</button>
        </td>`;
        tbody.appendChild(tr);
    });
}

// --- –†–µ–Ω–¥–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ---
function renderEmployees() {
  const tbody = document.querySelector('.employees .table-block tbody');
  if (!tbody) return;
  tbody.innerHTML = '';
  // —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏/–∫–Ω–æ–ø–æ–∫)
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π currentUserId, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1
  let currentUserId = window.currentUserId || 1;
  const currentUser = employees.find(e => e.id === currentUserId);
  employees.forEach(emp => {
    const tr = document.createElement('tr');
    let roleCell = '';
    // –ï—Å–ª–∏ admin ‚Äî –¥–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã —Ä–æ–ª–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–∫—Ä–æ–º–µ —Å–µ–±—è)
    if (currentUser && currentUser.role === 'admin' && emp.id !== currentUser.id) {
      roleCell = `<select class="role-select" data-id="${emp.id}">
        <option value="user"${emp.role==='user'?' selected':''}>user</option>
        <option value="admin"${emp.role==='admin'?' selected':''}>admin</option>
      </select>`;
      tr.innerHTML = `<td>${emp.name}</td><td>${emp.email}</td><td>${roleCell}</td>
        <td><button class="btn mini edit-emp-btn" data-id="${emp.id}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úé</button></td>`;
    } else {
      // –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä
      tr.innerHTML = `<td>${emp.name}</td><td>${emp.email}</td><td>${emp.role}</td><td></td>`;
    }
    tbody.appendChild(tr);
  });

  // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ select'—ã —Å–º–µ–Ω—ã —Ä–æ–ª–∏ –∏ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
  tbody.querySelectorAll('.role-select').forEach(sel => {
    sel.onchange = function() {
      const id = +this.dataset.id;
      const emp = employees.find(e => e.id === id);
      if (emp) {
        emp.role = this.value;
        renderEmployees();
      }
    };
  });
  tbody.querySelectorAll('.edit-emp-btn').forEach(btn => {
    btn.onclick = function() {
      const id = +this.dataset.id;
      const emp = employees.find(e => e.id === id);
      const modalEmp = document.getElementById('modal-employee');
      const empForm = document.getElementById('employee-form');
      const empCancel = document.getElementById('employee-cancel');
      if (!modalEmp || !empForm || !emp) return;
      // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
      empForm['emp-name'].value = emp.name;
      empForm['emp-email'].value = emp.email;
      empForm['emp-bio'].value = emp.bio || '';
      empForm['emp-role'].value = emp.role;
      modalEmp.style.display = 'flex';

      // –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—Ä–∞–∑–æ–≤–æ)
      empCancel.onclick = function() {
        modalEmp.style.display = 'none';
        empForm.reset();
      };
      empForm.onsubmit = function(e) {
        e.preventDefault();
        emp.name = empForm['emp-name'].value.trim();
        emp.email = empForm['emp-email'].value.trim();
        emp.bio = empForm['emp-bio'].value.trim();
        emp.role = empForm['emp-role'].value;
        renderEmployees();
        modalEmp.style.display = 'none';
        empForm.reset();
      };
    };
  });
}

// --- Kanban: Drag&Drop ---
function setUpDragAndDrop() {
    document.querySelectorAll('.kanban-card').forEach(card => {
        card.setAttribute('draggable', 'true');
        card.ondragstart = function(e) {
            card.classList.add('dragging');
            e.dataTransfer.setData('text/plain', card.querySelector('.edit-task-btn').dataset.id);
            setTimeout(() => card.style.opacity = '.2', 0);
        };
        card.ondragend = function() {
            card.classList.remove('dragging');
            card.style.opacity = '';
        }
    });
    document.querySelectorAll('.kanban-cards').forEach(col => {
        col.ondragover = function(e) { e.preventDefault(); col.classList.add('drop-hover'); };
        col.ondragleave = function() { col.classList.remove('drop-hover'); };
        col.ondrop = function(e) {
            e.preventDefault();
            col.classList.remove('drop-hover');
            const id = +e.dataTransfer.getData('text/plain');
            const status = col.id.replace('tasks-', '');
            tasks = tasks.map(t=>t.id===id ? { ...t, status } : t);
            renderTasks();
            setUpDragAndDrop();
        };
    })
}

// --- Kanban: –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞–¥ –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–æ–π ---
function updateKanbanColCounters() {
    const counts = {new:0, inprogress:0, review:0, done:0};
    let visibleTasks = tasks;
    const q = kanbanSearchQuery ? kanbanSearchQuery.trim().toLowerCase() : '';
    if (q.length > 0) {
        visibleTasks = tasks.filter(t => t.name.toLowerCase().includes(q));
    }
    visibleTasks.forEach(t => counts[t.status] = (counts[t.status]||0)+1);
    [
        {s:'new', title:'–ù–æ–≤—ã–µ'},
        {s:'inprogress', title:'–í –ø—Ä–æ—Ü–µ—Å—Å–µ'},
        {s:'review', title:'–ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å'},
        {s:'done', title:'–ì–æ—Ç–æ–≤–æ'}
    ].forEach(col => {
        const el = document.querySelector('.kanban-col[data-status="'+col.s+'"] .kanban-col-title');
        if (el) el.innerHTML = col.title+' <span class="col-count">'+counts[col.s]+'</span>';
    });
}

// --- Kanban: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ –ø–æ–∏—Å–∫—É ---
let kanbanSearchQuery = '';

function getStatusTitle(st) {
  return {
    'new': '–ù–æ–≤—ã–µ', 'inprogress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', 'review': '–ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å', 'done': '–ì–æ—Ç–æ–≤–æ',
  }[st] || st;
}

// --- Kanban: —Ä–µ–Ω–¥–µ—Ä –∑–∞–¥–∞—á ---
function origRenderTasks() {
    let visibleTasks = tasks;
    const q = kanbanSearchQuery.trim().toLowerCase();
    if (q.length > 0) {
        visibleTasks = tasks.filter(t => t.name.toLowerCase().includes(q));
    }
    ['new','inprogress','review','done'].forEach(st => {
        const col = document.getElementById('tasks-'+st);
        if (col) col.innerHTML = '';
    });
    const tasksByStatus = { new: [], inprogress: [], review: [], done: [] };
    visibleTasks.forEach(t => { if (tasksByStatus[t.status]) tasksByStatus[t.status].push(t); });
    Object.entries(tasksByStatus).forEach(([status, arr]) => {
        const col = document.getElementById('tasks-'+status);
        if (!col) return;
        if (arr.length === 0) {
            col.innerHTML = `<div class='kanban-empty' style='color:#b1b5be;text-align:center;padding:2.2em .5em 1.3em;opacity:.72;font-size:1.1em;user-select:none;'><div style='font-size:1.7em;margin-bottom:.1em;'>üì≠</div>–ù–µ—Ç –∑–∞–¥–∞—á</div>`;
        } else {
            arr.forEach(t => {
                const card = document.createElement('div');
                card.className = 'kanban-card kanban-fade-in';
                const statusColor = {
                    'new': '#c5dafe', 'inprogress': '#ffe8b0', 'review': '#fad5b3', 'done': '#bff8db',
                }[t.status] || '#f0f0f0';
                let priorityColor = {
                  high: '#e74c3c',
                  medium: '#f1c40f',
                  low: '#2ecc71'
                }[t.priority] || '#b0b6c5';
                card.innerHTML = `
                  <div class="kanban-card-column">
                    <div class="status-dot-wrapper"><span class="status-dot" title="${getStatusTitle(t.status)}" style="background:${statusColor};"></span></div>
                    <div class="card-title">${t.name}</div>
                    ${t.priority ? `<div class="mini-indicator" title="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç" style="color:${priorityColor};font-weight:bold;">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${t.priority[0].toUpperCase()}</div>` : ''}
                    ${t.assignee ? `<div class="mini-indicator" title="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" style="color:#497;">üë§ ${t.assignee}</div>` : ''}
                    ${t.date ? `<div class="mini-indicator" title="–î–∞—Ç–∞"><span style='color:#888;'>üóì</span> <span style='color:#497;'>${t.date}</span></div>` : ''}
                    ${t.desc ? `<div class="card-desc">${t.desc}</div>` : ''}
                    ${(t.subtasks && t.subtasks.length) ? `<ul class='kanban-subtasks'>`+
                      t.subtasks.map(st=>`<li><input type='checkbox' ${st.done?'checked':''} disabled> <span style='${st.done?'text-decoration:line-through;color:#aaa;':''}'>${st.text}</span></li>`).join('')
                    +'</ul>' : ''}
                    <div class="card-actions">
                      <button class="btn mini edit-task-btn" data-id="${t.id}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úé</button>
                      <button class="btn mini danger delete-task-btn" data-id="${t.id}" title="–£–¥–∞–ª–∏—Ç—å">üóë</button>
                    </div>
                  </div>
                `;
                col.appendChild(card);
                setTimeout(() => card.classList.remove('kanban-fade-in'), 440);
            });
        }
    });
}

// --- Kanban: –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞ –Ω–∞–≤–µ—à–∏–≤–∞–µ–º drag&drop, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ ---
function renderTasks() {
    origRenderTasks();
    setUpDragAndDrop();
    updateKanbanColCounters();
    setUpKanbanButtons();
}

// --- –ö–ù–û–ü–ö–ò –ö–ê–ù–ë–ê–ù–ê: –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—á–∏–µ edit/delete/create –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ---
function setUpKanbanButtons() {
  document.querySelectorAll('.kanban-card').forEach(card => {
    let editB = card.querySelector('.edit-task-btn');
    let delB = card.querySelector('.delete-task-btn');
    if (editB) editB.onclick = function(e) {
      e.stopPropagation();
      const id = +editB.dataset.id;
      window.openTaskModal('edit', id);
    };
    if (delB) delB.onclick = function(e) {
      e.preventDefault();
      card.classList.add('kanban-fade-out');
      card.addEventListener('animationend', function handler() {
        card.removeEventListener('animationend', handler);
        const idx = tasks.findIndex(task => task.id === +delB.dataset.id);
        if(idx !== -1) { tasks.splice(idx, 1); renderTasks(); }
      });
    };
  });
}

// --- –ú–æ–¥–∞–ª–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ ---
window.openProjectModal = function(mode, projectId) {
    const modal = document.getElementById('modal-project');
    const form = document.getElementById('project-form');
    const title = document.getElementById('project-form-title');
    if (!modal || !form || !title) return;
    form.reset();
    editProjectId = null;
    if (mode === 'edit' && projectId) {
        title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç';
        const pr = projects.find(p => p.id === projectId);
        if (pr) {
            form['proj-name'].value = pr.name;
            form['proj-desc'].value = pr.desc;
            form['proj-public'].value = pr.type;
            editProjectId = projectId;
        }
    } else {
        title.textContent = '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç';
    }
    modal.style.display = 'flex';
    setTimeout(() => { form['proj-name'].focus(); }, 180);
}
window.closeProjectModal = function() {
    document.getElementById('modal-project').style.display = 'none';
    editProjectId = null;
};

// --- –ú–æ–¥–∞–ª–∫–∞ –∑–∞–¥–∞—á–∏ ---
window.openTaskModal = function(mode, taskId) {
    const modal = document.getElementById('modal-task');
    const form = document.getElementById('task-form');
    const title = document.getElementById('task-form-title');
    form.reset();
    editTaskId = null;
    taskSubtasks = [];
    if (mode === 'edit' && taskId) {
        title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É';
        const t = tasks.find(t => t.id === taskId);
        if (t) {
            form['task-name'].value = t.name;
            form['task-desc'].value = t.desc;
            form['task-date'].value = t.date;
            form['task-status'].value = t.status;
            editTaskId = taskId;
            taskSubtasks = (t.subtasks||[]).map(s=>({...s}));
        }
    } else {
        title.textContent = '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É';
        form['task-status'].value = 'new';
        taskSubtasks = [];
    }
    renderSubtasksUI();
    modal.style.display = 'flex';
    setTimeout(() => { form['task-name'].focus(); }, 180);
}

// --- –Ø–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –∑–∞–¥–∞—á–∏ ---
window.closeTaskModal = function() {
  const modal = document.getElementById('modal-task');
  if(modal) {
    modal.style.display = 'none';
    // –ü–æ –∂–µ–ª–∞–Ω–∏—é –¥–µ–ª–∞—Ç—å –æ—á–∏—Å—Ç–∫—É/—Å–±—Ä–æ—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä.:
    // editTaskId = null; taskSubtasks = [];
  }
};

// --- –†–µ–Ω–¥–µ—Ä –ø–æ–¥–∑–∞–¥–∞—á –≤ –º–æ–¥–∞–ª–∫–µ –∑–∞–¥–∞—á–∏ ---
function renderSubtasksUI() {
    const ul = document.getElementById('subtasks-list');
    if (!ul) return;
    ul.innerHTML = '';
    if (!taskSubtasks.length) {
      ul.innerHTML = '<li style="color:#b8b8b8;font-size:.98em;">–ü–æ–¥–∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</li>';
    } else {
      taskSubtasks.forEach((st, i) => {
        const li = document.createElement('li');
        li.style.display = 'flex';
        li.style.alignItems = 'center';
        li.style.gap = '0.6em';
        li.innerHTML = `<input type='checkbox' ${st.done?"checked":""} style='margin-right:4px;' data-index='${i}'>
          <span style='flex:1 1 auto;'>${st.text}</span>
          <button class='btn mini danger' style='padding:0 7px;' data-index='${i}'>‚úñ</button>`;
        li.querySelector('button').onclick = (e) => {
          taskSubtasks.splice(i,1); renderSubtasksUI();
        };
        li.querySelector('input[type=checkbox]').onchange = (e)=>{
          taskSubtasks[i].done = e.target.checked;
        }
        ul.appendChild(li);
      });
    }
}

// --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ ---
function showModal(type, title, message, onOk) {
    const modal = document.getElementById('modal');
    const icon = document.getElementById('modal-icon');
    const t = document.getElementById('modal-title');
    const msg = document.getElementById('modal-message');
    const btnOk = document.getElementById('modal-ok');
    const btnCancel = document.getElementById('modal-cancel');

    let ic = '‚ÑπÔ∏è';
    if (type === 'error') ic = '‚ùó';
    else if (type === 'warning') ic = '‚ö†Ô∏è';
    else if (type === 'success') ic = '‚úÖ';
    icon.textContent = ic;
    t.textContent = title;
    msg.textContent = message;

    modal.style.display = 'flex';

    function closeHandler() {
        modal.style.display = 'none';
        btnOk.removeEventListener('click', okHandler);
        btnCancel.removeEventListener('click', cancelHandler);
    }
    function okHandler() {
        closeHandler();
        if (typeof onOk === 'function') onOk();
    }
    function cancelHandler() {
        closeHandler();
    }
    btnOk.addEventListener('click', okHandler);
    btnCancel.addEventListener('click', cancelHandler);
}

// --- –°–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—Ä—É—á–Ω—É—é ---
function hideModal() {
    const modal = document.getElementById('modal');
    if (modal) {
        modal.style.display = 'none';
        const btnOk = document.getElementById('modal-ok');
        const btnCancel = document.getElementById('modal-cancel');
        if (btnOk) {
            const newBtnOk = btnOk.cloneNode(true);
            btnOk.parentNode.replaceChild(newBtnOk, btnOk);
        }
        if (btnCancel) {
            const newBtnCancel = btnCancel.cloneNode(true);
            btnCancel.parentNode.replaceChild(newBtnCancel, btnCancel);
        }
    }
}

function setUpSectionHandlers(section) {
  if (section === 'tasks') {
    // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    const addTaskBtn = document.getElementById('add-task-btn');
    if (addTaskBtn) addTaskBtn.onclick = function(){ window.openTaskModal('create'); };
    // –∫–∞—Ä—Ç–æ—á–∫–∏: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏, –Ω–∞–≤–µ—Å—å—Ç–µ —Ç—É—Ç —Ç–æ–∂–µ
    if (typeof setUpKanbanButtons === 'function') setUpKanbanButtons();
  }
  if (section === 'projects') {
    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ tbody –¥–ª—è edit/delete
    const tbody = document.querySelector('.projects .table-block tbody');
    if (tbody) {
      tbody.onclick = e => {
        let btn = e.target.closest('button');
        if (!btn) return;
        const id = +btn.dataset.id;
        if (btn.classList.contains('edit-project-btn')) {
          window.openProjectModal('edit', id);
        }
        if (btn.classList.contains('delete-project-btn')) {
          showModal('warning', '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', '–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ?', function() {
            projects = projects.filter(p => p.id !== id);
            renderProjects();
            showModal('success', '–ì–æ—Ç–æ–≤–æ', '–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª—ë–Ω!');
          });
        }
      };
    }
    // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    const createBtn = document.querySelector('.projects .btn.primary');
    if (createBtn) createBtn.onclick = () => window.openProjectModal('create');
  }
}

document.addEventListener('DOMContentLoaded', function() {
  // --- –¢–ï–ö–£–©–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ (–∑–∞–≥–ª—É—à–∫–∞: –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ, –∏–ª–∏ –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥ auth.js) ---
  let currentUserId = 1; // –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ –ø–æ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º
  window.currentUserId = currentUserId;

  // 1. –†–µ–Ω–¥–µ—Ä–∏–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã demo-–¥–∞–Ω–Ω—ã–º–∏
  renderProjects();
  renderTasks();
  renderEmployees();

  // 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É'
  const addTaskBtn = document.getElementById('add-task-btn');
  if (addTaskBtn) addTaskBtn.onclick = function(){ window.openTaskModal('create'); };

  // 3. –ü–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞ Kanban —Å–Ω–æ–≤–∞ –Ω–∞–≤–µ—à–∏–≤–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ (edit/delete)
  setUpKanbanButtons();

  // --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–µ–∫—Ü–∏—è–º ---
  // --- –ù–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ä–µ–Ω–¥–µ—Ä–æ–º —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö ---
  const navBtns = document.querySelectorAll('.sidebar-nav li[data-section]');
  const appContent = document.getElementById('app-content');
  function setActiveSection(section) {
    navBtns.forEach(btn => btn.classList.toggle('active', btn.dataset.section === section));
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –±–ª–æ–∫ –ø–æ section
    if (section === 'profile') {
      appContent.innerHTML = `
        <section class="profile section active">
          <h2>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h2>
          <div class="profile-block">
            <div class="profile-info">
              <div><b>–§–ò–û:</b> –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤</div>
              <div><b>–ü–æ—á—Ç–∞:</b> client@pm.ru</div>
              <div><b>–ë–∏–æ–≥—Ä–∞—Ñ–∏—è:</b> –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å IT-–ø—Ä–æ–µ–∫—Ç–∞. –õ—é–±–ª—é Agile –∏ Kanban.</div>
            </div>
            <div class="profile-actions">
              <button class="btn">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
              <button class="btn danger">–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç</button>
            </div>
          </div>
        </section>
      `;
    } else if (section === 'employees') {
      appContent.innerHTML = `
        <section class="employees section active">
          <h2>–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</h2>
          <div class="table-block">
            <table>
              <thead>
                <tr><th>–§–ò–û</th><th>–ü–æ—á—Ç–∞</th><th>–†–æ–ª—å</th></tr>
              </thead>
              <tbody>
              </tbody>
            </table>
          </div>
        </section>
      `;
      renderEmployees();
    } else if (section === 'projects') {
      appContent.innerHTML = `
        <section class="projects section active">
          <h2>–ü—Ä–æ–µ–∫—Ç—ã</h2>
          <div class="table-block">
            <table>
              <thead>
                <tr><th>–ù–∞–∑–≤–∞–Ω–∏–µ</th><th>–¢–∏–ø</th><th>–û–ø–∏—Å–∞–Ω–∏–µ</th><th>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤</th><th></th></tr>
              </thead>
              <tbody></tbody>
            </table>
            <button class="btn primary" style="margin-top:1.3em;">–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç</button>
          </div>
        </section>
      `;
      renderProjects();
    } else if (section === 'tasks') {
      appContent.innerHTML = `
        <section class="tasks section active">
          <h2>–ú–æ–∏ –∑–∞–¥–∞—á–∏</h2>
          <input type="text" id="kanban-search" placeholder="–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á..." class="kanban-search" style="max-width:300px;margin-bottom:1em;">
          <button class="btn primary" id="add-task-btn" style="margin-bottom:1.4em;">–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É</button>
          <div class="kanban-board">
            <div class="kanban-col" data-status="new">
              <div class="kanban-col-title">–ù–æ–≤—ã–µ</div>
              <div class="kanban-cards" id="tasks-new"></div>
            </div>
            <div class="kanban-col" data-status="inprogress">
              <div class="kanban-col-title">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</div>
              <div class="kanban-cards" id="tasks-inprogress"></div>
            </div>
            <div class="kanban-col" data-status="review">
              <div class="kanban-col-title">–ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å</div>
              <div class="kanban-cards" id="tasks-review"></div>
            </div>
            <div class="kanban-col" data-status="done">
              <div class="kanban-col-title">–ì–æ—Ç–æ–≤–æ</div>
              <div class="kanban-cards" id="tasks-done"></div>
            </div>
          </div>
        </section>
      `;
      renderTasks();
    } else if (section === 'extra') {
      appContent.innerHTML = `
        <section class="other section active">
          <h2>–ß—Ç–æ-—Ç–æ –µ—â—ë</h2>
          <p>–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.</p>
        </section>
      `;
    }
    setUpSectionHandlers(section);
  }
  navBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      setActiveSection(btn.dataset.section);
    });
  });

  // --- –ü—Ä–æ–µ–∫—Ç—ã: –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ edit/delete ---
  const tbody = document.querySelector('.projects .table-block tbody');
  if (tbody) {
      tbody.onclick = e => {
          let btn = e.target.closest('button');
          if (!btn) return;
          const id = +btn.dataset.id;
          if (btn.classList.contains('edit-project-btn')) {
              window.openProjectModal('edit', id);
          }
          if (btn.classList.contains('delete-project-btn')) {
              showModal('warning', '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', '–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ?', function() {
                  projects = projects.filter(p => p.id !== id);
                  renderProjects();
                  showModal('success', '–ì–æ—Ç–æ–≤–æ', '–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª—ë–Ω!');
              });
          }
      };
  }

  // --- –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç" ---
  const createBtn = document.querySelector('.projects .btn.primary');
  if (createBtn) {
      createBtn.onclick = () => window.openProjectModal('create');
  }

  // --- –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞" –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –º–æ–¥–∞–ª–∫–∏ ---
  const cancelBtn = document.getElementById('project-cancel');
  if (cancelBtn) {
      cancelBtn.onclick = window.closeProjectModal;
  }

  // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ---
  const form = document.getElementById('project-form');
  if (form) {
      form.onsubmit = function(e) {
          e.preventDefault();
          const name = form['proj-name'].value.trim();
          const desc = form['proj-desc'].value.trim();
          const type = form['proj-public'].value;
          if (!name || !type) {
              showModal('error', '–û—à–∏–±–∫–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!');
              return;
          }
          if (editProjectId !== null) {
              projects = projects.map(pr => pr.id === editProjectId ? { ...pr, name, desc, type } : pr);
              showModal('success', '–£—Å–ø–µ—Ö', '–ü—Ä–æ–µ–∫—Ç –∏–∑–º–µ–Ω—ë–Ω!');
          } else {
              const newProject = {
                  id: Date.now(),
                  name, desc, type, users: 1
              };
              projects.push(newProject);
              showModal('success', '–£—Å–ø–µ—Ö', '–ü—Ä–æ–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!');
          }
          renderProjects();
          window.closeProjectModal();
          form.reset();
          editProjectId = null;
      };
  }

  // --- –î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ ---
  const delBtn = document.querySelector('.profile-actions .danger');
  if (delBtn) {
      delBtn.addEventListener('click', (e) => {
          e.preventDefault();
          showModal(
              'warning',
              '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?',
              '–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å, –ø—Ä–æ–µ–∫—Ç—ã –∏ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã. –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.',
              () => {
                  showModal('success', '–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω', '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.', null);
                  // –ó–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
              }
          );
      });
  }

  // --- –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É" (—É–∂–µ –≤—ã—à–µ) ---

  // --- –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏) ---
  const taskForm = document.getElementById('task-form');
  const taskModal = document.getElementById('modal-task');
  const taskCancelBtn = document.getElementById('task-cancel');
  let taskDeleteBtn = document.createElement('button');
  taskDeleteBtn.type = 'button';
  taskDeleteBtn.className = 'btn mini danger';
  taskDeleteBtn.style = 'float:right;margin-left:1.7em;';
  taskDeleteBtn.innerText = '–£–¥–∞–ª–∏—Ç—å';
  taskDeleteBtn.onclick = function () {
      if (editTaskId) {
          if(confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ?')) {
              tasks = tasks.filter(t => t.id !== editTaskId);
              renderTasks();
              window.closeTaskModal();
          }
      }
  };

  // --- submit —Ñ–æ—Ä–º—ã –∑–∞–¥–∞—á–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) ---
  if (taskForm) {
      taskForm.onsubmit = function(e) {
          e.preventDefault();
          const name = taskForm['task-name'].value.trim();
          const desc = taskForm['task-desc'].value.trim();
          const date = taskForm['task-date'].value;
          const status = taskForm['task-status'].value;
          if (!name) {
              alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏');
              return;
          }
          if (!date) {
              alert('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
              return;
          }
          const newTask = {
              id: editTaskId || getRandomId(),
              name,
              desc,
              date,
              status,
              subtasks: taskSubtasks.map(s => ({...s})),
          };
          if (editTaskId) {
              const idx = tasks.findIndex(t=>t.id===editTaskId);
              if(idx!==-1) tasks[idx]=newTask;
          } else {
              tasks.push(newTask);
          }
          renderTasks();
          window.closeTaskModal();
      };
  }

  // --- –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ –º–æ–¥–∞–ª–∫–µ –∑–∞–¥–∞—á–∏ ---
  if (taskCancelBtn) taskCancelBtn.onclick = () => window.closeTaskModal();

  // --- –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏ –∑–∞–¥–∞—á–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è ---
  const origOpenTaskModal = window.openTaskModal;
  window.openTaskModal = function(mode, taskId) {
      origOpenTaskModal(mode, taskId);
      let actionsDiv = document.querySelector('#task-form .modal-actions');
      if (mode === 'edit' && taskId) {
          if (!actionsDiv.contains(taskDeleteBtn)) {
              actionsDiv.insertBefore(taskDeleteBtn, actionsDiv.firstChild);
          }
      } else {
          if (actionsDiv.contains(taskDeleteBtn)) actionsDiv.removeChild(taskDeleteBtn);
      }
  };

  // --- –ü–æ–¥–∑–∞–¥–∞—á–∏: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ---
  const addSubtaskBtn = document.getElementById('add-subtask-btn');
  if (addSubtaskBtn) {
      addSubtaskBtn.onclick = ()=>{
          const input = document.getElementById('subtask-input');
          if (!input.value.trim()) return;
          taskSubtasks.push({id: getRandomId(), text: input.value.trim(), done:false});
          input.value = '';
          renderSubtasksUI();
      };
  }

  // --- –ø–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞—á–∞–º ---
  const searchInput = document.getElementById('kanban-search');
  if (searchInput) {
      searchInput.addEventListener('input', (e) => {
          kanbanSearchQuery = e.target.value;
          renderTasks();
      });
  }

  // --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç modal-task-view ---
  function openTaskViewModal(taskId) {
    const t = tasks.find(t => t.id === taskId);
    if (!t) return;
    const modal = document.getElementById('modal-task-view');
    const title = document.getElementById('task-view-title');
    const content = document.getElementById('task-view-content');
    if (title) title.textContent = t.name || '–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏';
    if (content) {
      content.innerHTML = `
        <div style='margin-bottom: .7em;'><b>–°—Ç–æ–ª–±–µ—Ü:</b> ${getStatusTitle(t.status)}</div>
        <div style='margin-bottom: .7em;'><b>–û–ø–∏—Å–∞–Ω–∏–µ:</b><br>${t.desc || '<i>–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è</i>'}</div>
        <div style='margin-bottom: .3em;'><b>–î–∞—Ç–∞:</b> ${t.date ? t.date : '-'}</div>
        ${
          (t.subtasks && t.subtasks.length) ?
          `<div style='margin-top:.7em;'><b>–ü–æ–¥–∑–∞–¥–∞—á–∏:</b>
            <ul style='margin:4px 0 0 0;padding-left:0;list-style:none;'>
              ${t.subtasks.map(st=>`<li style='display:flex;align-items:center;gap:6px;font-size:.98em;'><input type='checkbox' ${st.done?'checked':''} disabled style='margin:0 4px 0 0;'> <span style='${st.done?'text-decoration:line-through;color:#aaa;':''}'>${st.text}</span></li>`).join('')}
            </ul>
          </div>` : ''
        }
      `;
    }
    modal.style.display = 'flex';
  }
  const btnTaskViewClose = document.getElementById('task-view-close');
  if (btnTaskViewClose) {
    btnTaskViewClose.onclick = () => {
      document.getElementById('modal-task-view').style.display = 'none';
    }
  }
  ['tasks-new','tasks-inprogress','tasks-review','tasks-done'].forEach(colId => {
    const col = document.getElementById(colId);
    if (!col) return;
    col.addEventListener('click', (e) => {
      const card = e.target.closest('.kanban-card');
      if (!card) return;
      if (e.target.closest('button')) return;
      const btn = card.querySelector('.edit-task-btn');
      if (!btn) return;
      const id = +btn.dataset.id;
      openTaskViewModal(id);
    });
  });

  // --- –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è ---
  const editProfileBtn = document.querySelector('.profile-actions .btn:not(.danger)');
  const modalProfile = document.getElementById('modal-profile');
  const profileForm = document.getElementById('profile-form');
  const profileCancelBtn = document.getElementById('profile-cancel');

  if (editProfileBtn && modalProfile && profileForm && profileCancelBtn) {
    editProfileBtn.onclick = function() {
      const user = employees.find(e => e.id === currentUserId);
      // –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
      profileForm['profile-name'].value = user ? user.name : '';
      profileForm['profile-email'].value = user ? user.email : '';
      profileForm['profile-bio'].value = user ? (user.bio || '') : '';
      profileForm['profile-password'].value = '';
      profileForm['profile-password2'].value = '';
      modalProfile.style.display = 'flex';
    }
    profileCancelBtn.onclick = function() {
      modalProfile.style.display = 'none';
      profileForm.reset();
    };
    profileForm.onsubmit = function(e) {
      e.preventDefault();
      const name = profileForm['profile-name'].value.trim();
      const email = profileForm['profile-email'].value.trim();
      const bio = profileForm['profile-bio'].value.trim();
      const pass = profileForm['profile-password'].value;
      const pass2 = profileForm['profile-password2'].value;
      if (pass !== pass2) {
        alert('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
        return;
      }
      let user = employees.find(e => e.id === currentUserId);
      if (user) {
        user.name = name;
        user.email = email;
        user.bio = bio;
        // pass –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å (–∏–º–∏—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
      }
      // –û–±–Ω–æ–≤–∏–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const profileEl = document.querySelector('.profile-info');
      if (profileEl) {
        profileEl.innerHTML = `<div><b>–§–ò–û:</b> ${name}</div><div><b>–ü–æ—á—Ç–∞:</b> ${email}</div><div><b>–ë–∏–æ–≥—Ä–∞—Ñ–∏—è:</b> ${bio}</div>`;
      }
      modalProfile.style.display = 'none';
      profileForm.reset();
    }
  }

  // --- –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ---
  const deleteProfileBtn = document.querySelector('.profile-actions .btn.danger');
  const modalDelete = document.getElementById('modal-delete-profile');
  const delCancel = document.getElementById('delete-cancel');
  const delConfirm = document.getElementById('delete-confirm');

  if (deleteProfileBtn && modalDelete && delCancel && delConfirm) {
    deleteProfileBtn.onclick = function() {
      modalDelete.style.display = 'flex';
    };
    delCancel.onclick = function() {
      modalDelete.style.display = 'none';
    };
    delConfirm.onclick = function() {
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–∞—Å—Å–∏–≤–∞
      const idx = employees.findIndex(e => e.id === currentUserId);
      if (idx !== -1) employees.splice(idx, 1);
      modalDelete.style.display = 'none';
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º/–∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      const mc = document.querySelector('.main-content');
      if(mc) {
        mc.innerHTML = '<section class="section"><h2>–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω üëã</h2><p>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.</p></section>';
      }
    };
  }

  // --- –ú–æ–¥–∞–ª–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ---
  // (–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ renderEmployees)
});

/*
  CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π (–¥–æ–±–∞–≤—å—Ç–µ –≤ –≤–∞—à CSS-—Ñ–∞–π–ª):

  .kanban-fade-in {
    animation: kanbanFadeIn 0.44s cubic-bezier(.4,0,.2,1);
  }
  @keyframes kanbanFadeIn {
    from { opacity: 0; transform: translateY(16px) scale(.97);}
    to   { opacity: 1; transform: none;}
  }
  .kanban-fade-out {
    animation: kanbanFadeOut 0.36s cubic-bezier(.4,0,.2,1);
  }
  @keyframes kanbanFadeOut {
    from { opacity: 1; transform: none;}
    to   { opacity: 0; transform: translateY(16px) scale(.97);}
  }

  // –î–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ Kanban:
  .kanban-card {
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 2px 8px #0001;
    margin-bottom: 1.1em;
    padding: 1.1em 1.1em 0.7em 1.1em;
    display: flex;
    flex-direction: column;
    gap: 0.7em;
    border-left: 4px solid #e0e4f0;
    transition: box-shadow .18s;
  }
  .kanban-card-column {
    display: flex;
    flex-direction: column;
    gap: 0.5em;
  }
  .status-dot-wrapper {
    margin-bottom: 0.1em;
  }
  .status-dot {
    display: inline-block;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    box-shadow: 0 0 0 1.5px #b0b6c5;
    vertical-align: -2px;
    margin-right: 0.2em;
  }
  .card-title {
    font-weight: 600;
    font-size: 1.08em;
    color: #2a2d3a;
    margin-right: 0.5em;
    letter-spacing: 0.01em;
    margin-bottom: 0.1em;
  }
  .card-desc {
    color: #5a5a6a;
    font-size: 0.99em;
    margin-bottom: 0.3em;
    margin-top: 0.1em;
    line-height: 1.5;
    padding-left: 1.2em;
    border-left: 2px solid #e8eaf0;
    background: #f8fafd;
    border-radius: 0 6px 6px 0;
    padding-top: 0.2em;
    padding-bottom: 0.2em;
  }
  .kanban-subtasks {
    margin: 0.2em 0 0.5em 0;
    padding-left: 1.2em;
    list-style: none;
  }
  .kanban-subtasks li {
    display: flex;
    align-items: center;
    gap: 6px;
    font-size: 0.98em;
    margin-bottom: 0.1em;
  }
  .card-actions {
    display: flex;
    gap: 0.5em;
    justify-content: flex-end;
    margin-top: 0.2em;
    border-top: 1px solid #f0f2f7;
    padding-top: 0.5em;
  }
  .mini-indicator {
    font-size: 0.98em;
    margin-left: 0.2em;
    margin-right: 0.2em;
    vertical-align: middle;
    display: inline-flex;
    align-items: center;
    gap: 0.2em;
  }
*/
